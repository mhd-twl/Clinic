#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Logintest
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Medical_Center")]
	public partial class linkDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertNurse(Nurse instance);
    partial void UpdateNurse(Nurse instance);
    partial void DeleteNurse(Nurse instance);
    partial void InsertSecritary(Secritary instance);
    partial void UpdateSecritary(Secritary instance);
    partial void DeleteSecritary(Secritary instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertActionRecord(ActionRecord instance);
    partial void UpdateActionRecord(ActionRecord instance);
    partial void DeleteActionRecord(ActionRecord instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertFincialRecord(FincialRecord instance);
    partial void UpdateFincialRecord(FincialRecord instance);
    partial void DeleteFincialRecord(FincialRecord instance);
    partial void InsertApp_data(App_data instance);
    partial void UpdateApp_data(App_data instance);
    partial void DeleteApp_data(App_data instance);
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    #endregion
		
		public linkDataContext() : 
				base(global::Logintest.Properties.Settings.Default.Medical_CenterConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public linkDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linkDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linkDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linkDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Nurse> Nurses
		{
			get
			{
				return this.GetTable<Nurse>();
			}
		}
		
		public System.Data.Linq.Table<Secritary> Secritaries
		{
			get
			{
				return this.GetTable<Secritary>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<ActionRecord> ActionRecords
		{
			get
			{
				return this.GetTable<ActionRecord>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<FincialRecord> FincialRecords
		{
			get
			{
				return this.GetTable<FincialRecord>();
			}
		}
		
		public System.Data.Linq.Table<App_data> App_datas
		{
			get
			{
				return this.GetTable<App_data>();
			}
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Emp_id;
		
		private string _Emp_FirstName;
		
		private string _Emp_MiddleName;
		
		private string _Emp_LastName;
		
		private string _Emp_Address;
		
		private string _Emp_PhoneNum;
		
		private System.DateTime _Emp_Birthdate;
		
		private bool _Emp_Gender;
		
		private string _Password;
		
		private EntitySet<Nurse> _Nurses;
		
		private EntitySet<Secritary> _Secritaries;
		
		private EntitySet<Doctor> _Doctors;
		
		private EntitySet<ActionRecord> _ActionRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmp_idChanging(int value);
    partial void OnEmp_idChanged();
    partial void OnEmp_FirstNameChanging(string value);
    partial void OnEmp_FirstNameChanged();
    partial void OnEmp_MiddleNameChanging(string value);
    partial void OnEmp_MiddleNameChanged();
    partial void OnEmp_LastNameChanging(string value);
    partial void OnEmp_LastNameChanged();
    partial void OnEmp_AddressChanging(string value);
    partial void OnEmp_AddressChanged();
    partial void OnEmp_PhoneNumChanging(string value);
    partial void OnEmp_PhoneNumChanged();
    partial void OnEmp_BirthdateChanging(System.DateTime value);
    partial void OnEmp_BirthdateChanged();
    partial void OnEmp_GenderChanging(bool value);
    partial void OnEmp_GenderChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Employee()
		{
			this._Nurses = new EntitySet<Nurse>(new Action<Nurse>(this.attach_Nurses), new Action<Nurse>(this.detach_Nurses));
			this._Secritaries = new EntitySet<Secritary>(new Action<Secritary>(this.attach_Secritaries), new Action<Secritary>(this.detach_Secritaries));
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			this._ActionRecords = new EntitySet<ActionRecord>(new Action<ActionRecord>(this.attach_ActionRecords), new Action<ActionRecord>(this.detach_ActionRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Emp_id
		{
			get
			{
				return this._Emp_id;
			}
			set
			{
				if ((this._Emp_id != value))
				{
					this.OnEmp_idChanging(value);
					this.SendPropertyChanging();
					this._Emp_id = value;
					this.SendPropertyChanged("Emp_id");
					this.OnEmp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_FirstName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Emp_FirstName
		{
			get
			{
				return this._Emp_FirstName;
			}
			set
			{
				if ((this._Emp_FirstName != value))
				{
					this.OnEmp_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Emp_FirstName = value;
					this.SendPropertyChanged("Emp_FirstName");
					this.OnEmp_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_MiddleName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Emp_MiddleName
		{
			get
			{
				return this._Emp_MiddleName;
			}
			set
			{
				if ((this._Emp_MiddleName != value))
				{
					this.OnEmp_MiddleNameChanging(value);
					this.SendPropertyChanging();
					this._Emp_MiddleName = value;
					this.SendPropertyChanged("Emp_MiddleName");
					this.OnEmp_MiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_LastName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Emp_LastName
		{
			get
			{
				return this._Emp_LastName;
			}
			set
			{
				if ((this._Emp_LastName != value))
				{
					this.OnEmp_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Emp_LastName = value;
					this.SendPropertyChanged("Emp_LastName");
					this.OnEmp_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_Address", DbType="NChar(200) NOT NULL", CanBeNull=false)]
		public string Emp_Address
		{
			get
			{
				return this._Emp_Address;
			}
			set
			{
				if ((this._Emp_Address != value))
				{
					this.OnEmp_AddressChanging(value);
					this.SendPropertyChanging();
					this._Emp_Address = value;
					this.SendPropertyChanged("Emp_Address");
					this.OnEmp_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_PhoneNum", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Emp_PhoneNum
		{
			get
			{
				return this._Emp_PhoneNum;
			}
			set
			{
				if ((this._Emp_PhoneNum != value))
				{
					this.OnEmp_PhoneNumChanging(value);
					this.SendPropertyChanging();
					this._Emp_PhoneNum = value;
					this.SendPropertyChanged("Emp_PhoneNum");
					this.OnEmp_PhoneNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_Birthdate", DbType="Date NOT NULL")]
		public System.DateTime Emp_Birthdate
		{
			get
			{
				return this._Emp_Birthdate;
			}
			set
			{
				if ((this._Emp_Birthdate != value))
				{
					this.OnEmp_BirthdateChanging(value);
					this.SendPropertyChanging();
					this._Emp_Birthdate = value;
					this.SendPropertyChanged("Emp_Birthdate");
					this.OnEmp_BirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_Gender", DbType="Bit NOT NULL")]
		public bool Emp_Gender
		{
			get
			{
				return this._Emp_Gender;
			}
			set
			{
				if ((this._Emp_Gender != value))
				{
					this.OnEmp_GenderChanging(value);
					this.SendPropertyChanging();
					this._Emp_Gender = value;
					this.SendPropertyChanged("Emp_Gender");
					this.OnEmp_GenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Nurse", Storage="_Nurses", ThisKey="Emp_id", OtherKey="Emp_id")]
		public EntitySet<Nurse> Nurses
		{
			get
			{
				return this._Nurses;
			}
			set
			{
				this._Nurses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Secritary", Storage="_Secritaries", ThisKey="Emp_id", OtherKey="Emp_id")]
		public EntitySet<Secritary> Secritaries
		{
			get
			{
				return this._Secritaries;
			}
			set
			{
				this._Secritaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Doctor", Storage="_Doctors", ThisKey="Emp_id", OtherKey="Emp_id")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ActionRecord", Storage="_ActionRecords", ThisKey="Emp_id", OtherKey="Emp_id")]
		public EntitySet<ActionRecord> ActionRecords
		{
			get
			{
				return this._ActionRecords;
			}
			set
			{
				this._ActionRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Secritaries(Secritary entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Secritaries(Secritary entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ActionRecords(ActionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ActionRecords(ActionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nurse")]
	public partial class Nurse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _N_id;
		
		private string _Extra_info;
		
		private int _Emp_id;
		
		private System.DateTime _Grad_year;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnN_idChanging(int value);
    partial void OnN_idChanged();
    partial void OnExtra_infoChanging(string value);
    partial void OnExtra_infoChanged();
    partial void OnEmp_idChanging(int value);
    partial void OnEmp_idChanged();
    partial void OnGrad_yearChanging(System.DateTime value);
    partial void OnGrad_yearChanged();
    #endregion
		
		public Nurse()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_N_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int N_id
		{
			get
			{
				return this._N_id;
			}
			set
			{
				if ((this._N_id != value))
				{
					this.OnN_idChanging(value);
					this.SendPropertyChanging();
					this._N_id = value;
					this.SendPropertyChanged("N_id");
					this.OnN_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extra_info", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Extra_info
		{
			get
			{
				return this._Extra_info;
			}
			set
			{
				if ((this._Extra_info != value))
				{
					this.OnExtra_infoChanging(value);
					this.SendPropertyChanging();
					this._Extra_info = value;
					this.SendPropertyChanged("Extra_info");
					this.OnExtra_infoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_id", DbType="Int NOT NULL")]
		public int Emp_id
		{
			get
			{
				return this._Emp_id;
			}
			set
			{
				if ((this._Emp_id != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmp_idChanging(value);
					this.SendPropertyChanging();
					this._Emp_id = value;
					this.SendPropertyChanged("Emp_id");
					this.OnEmp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grad_year", DbType="Date NOT NULL")]
		public System.DateTime Grad_year
		{
			get
			{
				return this._Grad_year;
			}
			set
			{
				if ((this._Grad_year != value))
				{
					this.OnGrad_yearChanging(value);
					this.SendPropertyChanging();
					this._Grad_year = value;
					this.SendPropertyChanged("Grad_year");
					this.OnGrad_yearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Nurse", Storage="_Employee", ThisKey="Emp_id", OtherKey="Emp_id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Nurses.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Nurses.Add(this);
						this._Emp_id = value.Emp_id;
					}
					else
					{
						this._Emp_id = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Secritary")]
	public partial class Secritary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Sec_id;
		
		private int _Emp_id;
		
		private string _Extra_info;
		
		private System.DateTime _Grad_year;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSec_idChanging(int value);
    partial void OnSec_idChanged();
    partial void OnEmp_idChanging(int value);
    partial void OnEmp_idChanged();
    partial void OnExtra_infoChanging(string value);
    partial void OnExtra_infoChanged();
    partial void OnGrad_yearChanging(System.DateTime value);
    partial void OnGrad_yearChanged();
    #endregion
		
		public Secritary()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sec_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Sec_id
		{
			get
			{
				return this._Sec_id;
			}
			set
			{
				if ((this._Sec_id != value))
				{
					this.OnSec_idChanging(value);
					this.SendPropertyChanging();
					this._Sec_id = value;
					this.SendPropertyChanged("Sec_id");
					this.OnSec_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_id", DbType="Int NOT NULL")]
		public int Emp_id
		{
			get
			{
				return this._Emp_id;
			}
			set
			{
				if ((this._Emp_id != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmp_idChanging(value);
					this.SendPropertyChanging();
					this._Emp_id = value;
					this.SendPropertyChanged("Emp_id");
					this.OnEmp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extra_info", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Extra_info
		{
			get
			{
				return this._Extra_info;
			}
			set
			{
				if ((this._Extra_info != value))
				{
					this.OnExtra_infoChanging(value);
					this.SendPropertyChanging();
					this._Extra_info = value;
					this.SendPropertyChanged("Extra_info");
					this.OnExtra_infoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grad_year", DbType="Date NOT NULL")]
		public System.DateTime Grad_year
		{
			get
			{
				return this._Grad_year;
			}
			set
			{
				if ((this._Grad_year != value))
				{
					this.OnGrad_yearChanging(value);
					this.SendPropertyChanging();
					this._Grad_year = value;
					this.SendPropertyChanged("Grad_year");
					this.OnGrad_yearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Secritary", Storage="_Employee", ThisKey="Emp_id", OtherKey="Emp_id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Secritaries.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Secritaries.Add(this);
						this._Emp_id = value.Emp_id;
					}
					else
					{
						this._Emp_id = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Spec;
		
		private int _Doc_id;
		
		private int _Emp_id;
		
		private string _Extra_info;
		
		private System.DateTime _Grad_year;
		
		private bool _Is_admin;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecChanging(string value);
    partial void OnSpecChanged();
    partial void OnDoc_idChanging(int value);
    partial void OnDoc_idChanged();
    partial void OnEmp_idChanging(int value);
    partial void OnEmp_idChanged();
    partial void OnExtra_infoChanging(string value);
    partial void OnExtra_infoChanged();
    partial void OnGrad_yearChanging(System.DateTime value);
    partial void OnGrad_yearChanged();
    partial void OnIs_adminChanging(bool value);
    partial void OnIs_adminChanged();
    #endregion
		
		public Doctor()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spec", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Spec
		{
			get
			{
				return this._Spec;
			}
			set
			{
				if ((this._Spec != value))
				{
					this.OnSpecChanging(value);
					this.SendPropertyChanging();
					this._Spec = value;
					this.SendPropertyChanged("Spec");
					this.OnSpecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doc_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Doc_id
		{
			get
			{
				return this._Doc_id;
			}
			set
			{
				if ((this._Doc_id != value))
				{
					this.OnDoc_idChanging(value);
					this.SendPropertyChanging();
					this._Doc_id = value;
					this.SendPropertyChanged("Doc_id");
					this.OnDoc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_id", DbType="Int NOT NULL")]
		public int Emp_id
		{
			get
			{
				return this._Emp_id;
			}
			set
			{
				if ((this._Emp_id != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmp_idChanging(value);
					this.SendPropertyChanging();
					this._Emp_id = value;
					this.SendPropertyChanged("Emp_id");
					this.OnEmp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extra_info", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Extra_info
		{
			get
			{
				return this._Extra_info;
			}
			set
			{
				if ((this._Extra_info != value))
				{
					this.OnExtra_infoChanging(value);
					this.SendPropertyChanging();
					this._Extra_info = value;
					this.SendPropertyChanged("Extra_info");
					this.OnExtra_infoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grad_year", DbType="Date NOT NULL")]
		public System.DateTime Grad_year
		{
			get
			{
				return this._Grad_year;
			}
			set
			{
				if ((this._Grad_year != value))
				{
					this.OnGrad_yearChanging(value);
					this.SendPropertyChanging();
					this._Grad_year = value;
					this.SendPropertyChanged("Grad_year");
					this.OnGrad_yearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_admin", DbType="Bit NOT NULL")]
		public bool Is_admin
		{
			get
			{
				return this._Is_admin;
			}
			set
			{
				if ((this._Is_admin != value))
				{
					this.OnIs_adminChanging(value);
					this.SendPropertyChanging();
					this._Is_admin = value;
					this.SendPropertyChanged("Is_admin");
					this.OnIs_adminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Doctor", Storage="_Employee", ThisKey="Emp_id", OtherKey="Emp_id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._Emp_id = value.Emp_id;
					}
					else
					{
						this._Emp_id = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActionRecord")]
	public partial class ActionRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Action_id;
		
		private int _Emp_id;
		
		private System.Nullable<int> _Patient_id;
		
		private System.Nullable<System.DateTime> _Action_date;
		
		private string _Type;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAction_idChanging(int value);
    partial void OnAction_idChanged();
    partial void OnEmp_idChanging(int value);
    partial void OnEmp_idChanged();
    partial void OnPatient_idChanging(System.Nullable<int> value);
    partial void OnPatient_idChanged();
    partial void OnAction_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnAction_dateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public ActionRecord()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Action_id
		{
			get
			{
				return this._Action_id;
			}
			set
			{
				if ((this._Action_id != value))
				{
					this.OnAction_idChanging(value);
					this.SendPropertyChanging();
					this._Action_id = value;
					this.SendPropertyChanged("Action_id");
					this.OnAction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Emp_id", DbType="Int NOT NULL")]
		public int Emp_id
		{
			get
			{
				return this._Emp_id;
			}
			set
			{
				if ((this._Emp_id != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmp_idChanging(value);
					this.SendPropertyChanging();
					this._Emp_id = value;
					this.SendPropertyChanged("Emp_id");
					this.OnEmp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_id", DbType="Int")]
		public System.Nullable<int> Patient_id
		{
			get
			{
				return this._Patient_id;
			}
			set
			{
				if ((this._Patient_id != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_idChanging(value);
					this.SendPropertyChanging();
					this._Patient_id = value;
					this.SendPropertyChanged("Patient_id");
					this.OnPatient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action_date", DbType="Date")]
		public System.Nullable<System.DateTime> Action_date
		{
			get
			{
				return this._Action_date;
			}
			set
			{
				if ((this._Action_date != value))
				{
					this.OnAction_dateChanging(value);
					this.SendPropertyChanging();
					this._Action_date = value;
					this.SendPropertyChanged("Action_date");
					this.OnAction_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ActionRecord", Storage="_Employee", ThisKey="Emp_id", OtherKey="Emp_id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ActionRecords.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ActionRecords.Add(this);
						this._Emp_id = value.Emp_id;
					}
					else
					{
						this._Emp_id = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_ActionRecord", Storage="_Patient", ThisKey="Patient_id", OtherKey="p_id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.ActionRecords.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.ActionRecords.Add(this);
						this._Patient_id = value.p_id;
					}
					else
					{
						this._Patient_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _p_id;
		
		private string _P_fname;
		
		private string _P_lname;
		
		private string _P_MobileNum;
		
		private int _Fin_id;
		
		private EntitySet<ActionRecord> _ActionRecords;
		
		private EntitySet<App_data> _App_datas;
		
		private EntityRef<FincialRecord> _FincialRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onp_idChanging(int value);
    partial void Onp_idChanged();
    partial void OnP_fnameChanging(string value);
    partial void OnP_fnameChanged();
    partial void OnP_lnameChanging(string value);
    partial void OnP_lnameChanged();
    partial void OnP_MobileNumChanging(string value);
    partial void OnP_MobileNumChanged();
    partial void OnFin_idChanging(int value);
    partial void OnFin_idChanged();
    #endregion
		
		public Patient()
		{
			this._ActionRecords = new EntitySet<ActionRecord>(new Action<ActionRecord>(this.attach_ActionRecords), new Action<ActionRecord>(this.detach_ActionRecords));
			this._App_datas = new EntitySet<App_data>(new Action<App_data>(this.attach_App_datas), new Action<App_data>(this.detach_App_datas));
			this._FincialRecord = default(EntityRef<FincialRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_p_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int p_id
		{
			get
			{
				return this._p_id;
			}
			set
			{
				if ((this._p_id != value))
				{
					if (this._FincialRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onp_idChanging(value);
					this.SendPropertyChanging();
					this._p_id = value;
					this.SendPropertyChanged("p_id");
					this.Onp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_fname", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string P_fname
		{
			get
			{
				return this._P_fname;
			}
			set
			{
				if ((this._P_fname != value))
				{
					this.OnP_fnameChanging(value);
					this.SendPropertyChanging();
					this._P_fname = value;
					this.SendPropertyChanged("P_fname");
					this.OnP_fnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_lname", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string P_lname
		{
			get
			{
				return this._P_lname;
			}
			set
			{
				if ((this._P_lname != value))
				{
					this.OnP_lnameChanging(value);
					this.SendPropertyChanging();
					this._P_lname = value;
					this.SendPropertyChanged("P_lname");
					this.OnP_lnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_MobileNum", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string P_MobileNum
		{
			get
			{
				return this._P_MobileNum;
			}
			set
			{
				if ((this._P_MobileNum != value))
				{
					this.OnP_MobileNumChanging(value);
					this.SendPropertyChanging();
					this._P_MobileNum = value;
					this.SendPropertyChanged("P_MobileNum");
					this.OnP_MobileNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fin_id", DbType="Int NOT NULL")]
		public int Fin_id
		{
			get
			{
				return this._Fin_id;
			}
			set
			{
				if ((this._Fin_id != value))
				{
					this.OnFin_idChanging(value);
					this.SendPropertyChanging();
					this._Fin_id = value;
					this.SendPropertyChanged("Fin_id");
					this.OnFin_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_ActionRecord", Storage="_ActionRecords", ThisKey="p_id", OtherKey="Patient_id")]
		public EntitySet<ActionRecord> ActionRecords
		{
			get
			{
				return this._ActionRecords;
			}
			set
			{
				this._ActionRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_App_data", Storage="_App_datas", ThisKey="p_id", OtherKey="P_id")]
		public EntitySet<App_data> App_datas
		{
			get
			{
				return this._App_datas;
			}
			set
			{
				this._App_datas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FincialRecord_Patient", Storage="_FincialRecord", ThisKey="p_id", OtherKey="P_id", IsForeignKey=true)]
		public FincialRecord FincialRecord
		{
			get
			{
				return this._FincialRecord.Entity;
			}
			set
			{
				FincialRecord previousValue = this._FincialRecord.Entity;
				if (((previousValue != value) 
							|| (this._FincialRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FincialRecord.Entity = null;
						previousValue.Patient = null;
					}
					this._FincialRecord.Entity = value;
					if ((value != null))
					{
						value.Patient = this;
						this._p_id = value.P_id;
					}
					else
					{
						this._p_id = default(int);
					}
					this.SendPropertyChanged("FincialRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActionRecords(ActionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_ActionRecords(ActionRecord entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_App_datas(App_data entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_App_datas(App_data entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FincialRecord")]
	public partial class FincialRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _P_id;
		
		private int _Balance;
		
		private int _Payed;
		
		private System.Nullable<int> _ShouldPay;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnP_idChanging(int value);
    partial void OnP_idChanged();
    partial void OnBalanceChanging(int value);
    partial void OnBalanceChanged();
    partial void OnPayedChanging(int value);
    partial void OnPayedChanged();
    partial void OnShouldPayChanging(System.Nullable<int> value);
    partial void OnShouldPayChanged();
    #endregion
		
		public FincialRecord()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int P_id
		{
			get
			{
				return this._P_id;
			}
			set
			{
				if ((this._P_id != value))
				{
					this.OnP_idChanging(value);
					this.SendPropertyChanging();
					this._P_id = value;
					this.SendPropertyChanged("P_id");
					this.OnP_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Int NOT NULL")]
		public int Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payed", DbType="Int NOT NULL")]
		public int Payed
		{
			get
			{
				return this._Payed;
			}
			set
			{
				if ((this._Payed != value))
				{
					this.OnPayedChanging(value);
					this.SendPropertyChanging();
					this._Payed = value;
					this.SendPropertyChanged("Payed");
					this.OnPayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShouldPay", DbType="Int")]
		public System.Nullable<int> ShouldPay
		{
			get
			{
				return this._ShouldPay;
			}
			set
			{
				if ((this._ShouldPay != value))
				{
					this.OnShouldPayChanging(value);
					this.SendPropertyChanging();
					this._ShouldPay = value;
					this.SendPropertyChanged("ShouldPay");
					this.OnShouldPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FincialRecord_Patient", Storage="_Patient", ThisKey="P_id", OtherKey="p_id", IsUnique=true, IsForeignKey=false)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.FincialRecord = null;
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.FincialRecord = this;
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.App_data")]
	public partial class App_data : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _P_id;
		
		private int _App_id;
		
		private string _Examination_data;
		
		private string _Result_data;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Appointment> _Appointment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnP_idChanging(int value);
    partial void OnP_idChanged();
    partial void OnApp_idChanging(int value);
    partial void OnApp_idChanged();
    partial void OnExamination_dataChanging(string value);
    partial void OnExamination_dataChanged();
    partial void OnResult_dataChanging(string value);
    partial void OnResult_dataChanged();
    #endregion
		
		public App_data()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Appointment = default(EntityRef<Appointment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int P_id
		{
			get
			{
				return this._P_id;
			}
			set
			{
				if ((this._P_id != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnP_idChanging(value);
					this.SendPropertyChanging();
					this._P_id = value;
					this.SendPropertyChanged("P_id");
					this.OnP_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_App_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int App_id
		{
			get
			{
				return this._App_id;
			}
			set
			{
				if ((this._App_id != value))
				{
					if (this._Appointment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApp_idChanging(value);
					this.SendPropertyChanging();
					this._App_id = value;
					this.SendPropertyChanged("App_id");
					this.OnApp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Examination_data", DbType="NVarChar(MAX)")]
		public string Examination_data
		{
			get
			{
				return this._Examination_data;
			}
			set
			{
				if ((this._Examination_data != value))
				{
					this.OnExamination_dataChanging(value);
					this.SendPropertyChanging();
					this._Examination_data = value;
					this.SendPropertyChanged("Examination_data");
					this.OnExamination_dataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_data", DbType="NVarChar(MAX)")]
		public string Result_data
		{
			get
			{
				return this._Result_data;
			}
			set
			{
				if ((this._Result_data != value))
				{
					this.OnResult_dataChanging(value);
					this.SendPropertyChanging();
					this._Result_data = value;
					this.SendPropertyChanged("Result_data");
					this.OnResult_dataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_App_data", Storage="_Patient", ThisKey="P_id", OtherKey="p_id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.App_datas.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.App_datas.Add(this);
						this._P_id = value.p_id;
					}
					else
					{
						this._P_id = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_App_data", Storage="_Appointment", ThisKey="App_id", OtherKey="App_id", IsForeignKey=true)]
		public Appointment Appointment
		{
			get
			{
				return this._Appointment.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment.Entity;
				if (((previousValue != value) 
							|| (this._Appointment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment.Entity = null;
						previousValue.App_datas.Remove(this);
					}
					this._Appointment.Entity = value;
					if ((value != null))
					{
						value.App_datas.Add(this);
						this._App_id = value.App_id;
					}
					else
					{
						this._App_id = default(int);
					}
					this.SendPropertyChanged("Appointment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Patient_id;
		
		private int _App_id;
		
		private System.DateTime _App_date;
		
		private EntitySet<App_data> _App_datas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatient_idChanging(int value);
    partial void OnPatient_idChanged();
    partial void OnApp_idChanging(int value);
    partial void OnApp_idChanged();
    partial void OnApp_dateChanging(System.DateTime value);
    partial void OnApp_dateChanged();
    #endregion
		
		public Appointment()
		{
			this._App_datas = new EntitySet<App_data>(new Action<App_data>(this.attach_App_datas), new Action<App_data>(this.detach_App_datas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_id", DbType="Int NOT NULL")]
		public int Patient_id
		{
			get
			{
				return this._Patient_id;
			}
			set
			{
				if ((this._Patient_id != value))
				{
					this.OnPatient_idChanging(value);
					this.SendPropertyChanging();
					this._Patient_id = value;
					this.SendPropertyChanged("Patient_id");
					this.OnPatient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_App_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int App_id
		{
			get
			{
				return this._App_id;
			}
			set
			{
				if ((this._App_id != value))
				{
					this.OnApp_idChanging(value);
					this.SendPropertyChanging();
					this._App_id = value;
					this.SendPropertyChanged("App_id");
					this.OnApp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_App_date", DbType="Date NOT NULL")]
		public System.DateTime App_date
		{
			get
			{
				return this._App_date;
			}
			set
			{
				if ((this._App_date != value))
				{
					this.OnApp_dateChanging(value);
					this.SendPropertyChanging();
					this._App_date = value;
					this.SendPropertyChanged("App_date");
					this.OnApp_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_App_data", Storage="_App_datas", ThisKey="App_id", OtherKey="App_id")]
		public EntitySet<App_data> App_datas
		{
			get
			{
				return this._App_datas;
			}
			set
			{
				this._App_datas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_App_datas(App_data entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = this;
		}
		
		private void detach_App_datas(App_data entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = null;
		}
	}
}
#pragma warning restore 1591
